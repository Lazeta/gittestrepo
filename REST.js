// REST API - Representation State Transfer Application Programming Interface - это архитектурный стиль взаимодействия компонентов распределённого приложения в сети.
// В контексте веб-разработки, он позволяет веб-сервисам общаться друг с другом через HTTP\HTTPS, используя стандартные методы HTTP (GET, POST, PUT, DELETE) для выполнения операций над данными.

// Принципы REST
// Stateless - без состояния: каждый запрос от клиента к серверу должен содержать всю информацию, необходимую для его выполнения. Сервер не сохраняет состояние клиента между запросами.
// Uniform Interface - единообразие интерфейса: Определяет стандартный способ взаимодействия между клиентом и сервером, что облегчает и унифицирует разработку и взаимодействие компонентов системы.
// Cacheable - Кэширование: Ответы на запросы могут быть кэшируемыми или некэшируемыми, что позволяет улучшить производительность за счёт уменьшения нагрузки на сервер.
// Client-Server - Клиент-сервер: Разделение обязанностей между клиентом (например, пользовательским интерфейсом) и сервером (хранилище данных), что упрощает разработку и масштабирование компонентов независимо друг от друга.
// Layered System - многоуровневая система: Клиент не может обязательно знать, общается ли он напрямую с сервером или через посредников, что повышает безопасность системы и позволяет использовать балансировщики нагрузки, кэширующие сервера и т.д.
// Code on Demand - код по требованию: Сервер может временно расширять или настраивать функциональность клиента, передавая ему исполняемый код.

// HTTP-методы:
// GET - получить данные о ресурсе
// POST - создать новый ресурс
// PUT - обновление существующего ресурса
// DELETE - удаление ресурса
// HEAD - получение метаданных о ресурсе
// OPTIONS - получение метаданных о возможностях ресурса
// PATCH - частичное обновление ресурса

// В REST ресурсы идентифицируются с помощью URI (Uniform Resource Identifier). Каждому ресурсу соответствует уникальный URI, по которому можно получить доступ к этому ресурсу.

// Форматы данных RESTful API:
// JSON \ XML \ HTML

// HTML - HyperText Markup Language
// HTTP - HyperText Transfer Protocol
// HTTPS - HyperText Transfer Protocol Secure
// JSON - JavaScript Object Notation
// XML - Extensible Markup Language
// REST API - Representation State Transfer Application Programming Interface
// REST - Representational State Transfer

// где используют REST API:
// Мобильные приложения, интеграция систем, веб-сервисы
// веб-сервисы: веб-сайты используют его для запроса данных с сервера (например, загрузка списка пользователей, публикации сообщений в блоге).
// мобильные приложения: мобильные приложения общаются с сервером для получения и отправки данных (например, проверка погоды, отправка сообщений).
// Интеграция с внешними сервисами: Приложения могут интегрироваться с внешними API для расширения своего функционала (например, использование карт Google Maps, интеграция с социальными сетями).

// Заключение
// REST API - это набор принципов и ограничений для создания веб-сервисов, который обеспечивает гибкое и эффективное взаимодействие между компонентами распределённых систем через HTTP.
// Благодаря своей простоте, масштабируемости и гибкости, REST стал доминирующим стилем для разработки API для веб-приложений.